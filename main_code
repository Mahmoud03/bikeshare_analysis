import time
import pandas as pd
import numpy as np

CITY_DATA = { 'Chicago': 'chicago.csv',
              'New York City': 'new_york_city.csv',
              'Washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Which City you would like to explore today? please type\
 Chicago, New York City or Washington for your choice.\n').title()

    while city not in CITY_DATA:
        print('\nThat\'s not a valid entry!')
        city = input('please type Chicago, New York City or Washington for your choice.\n').title()

    # get user input for month (all, january, february, ... , june)
    month = input('\nWhich Month would like to filter the data by? please type a month\
 from January to June or type none for no filter.\n').title()

    while month not in ['January', 'February', 'March', 'April', 'May', 'June', 'None']:
        print('\nThat\'s not a valid entry!')
        month = input('please type a month from January to June or type none for no filter.\n').title()

    # get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('\nWhich day of the week would like to filter the data by? please type a day\
 from Monday to Sunday or type none for no filter.\n').title()

    while day not in ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'None']:
        print('\nThat\'s not a valid entry!')
        day = input('please type a day from Sunday to Saturday or type none for no filter.\n').title()

    print('\nyour choices are {}, {}, {}.'.format(city, month, day))

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    #dealing with NAN by filling it with Not specified
    #df.fillna('Not Specified', inplace = True)

    df['Start Time'] = pd.to_datetime(df['Start Time'])

    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.strftime('%A')
    df['Start Hour'] = df['Start Time'].dt.hour

    if month != 'None':
        available_months = ['January', 'February', 'March', 'April', 'May', 'June']
        month = available_months.index(month) + 1
        df = df[df['month'] == month]

    if day != 'None':
        df = df[df['day_of_week'] == day]

    #display the count of filtered DataFrame
    print()
    print('The total number for entries for the filtered data is ', df['Start Time'].count())
    print('-'*40)

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()


    # display the most common month
    available_months = ['January', 'February', 'March', 'April', 'May', 'June']
    the_most_common_month = df['month'].mode()[0]
    print('The most common month for the given arguments is ', available_months[the_most_common_month - 1])

    # display the most common day of week
    the_most_common_day = df['day_of_week'].mode()[0]
    print('The most common day of week for the given arguments is ', the_most_common_day)

    # display the most common start hour
    the_most_common_start_hour = df['Start Hour'].mode()[0]
    print('The most common start hour for the given arguments is ', the_most_common_start_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    most_common_start_station = df['Start Station'].mode()[0]
    print('The most common used start station for the given arguments is ', most_common_start_station)

    # display most commonly used end station
    most_common_end_station = df['End Station'].mode()[0]
    print('The most common used end station for the given arguments is ', most_common_end_station)

    # display most frequent combination of start station and end station trip
    most_frequent_trip = ('from "' + df['Start Station'] + '" to "' + df['End Station'] + '"').mode()[0]
    print('The most frequent trip for the given arguments is ', most_frequent_trip)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel_time_in_hrs = df['Trip Duration'].sum() / 3600
    print('Total travel time in hours for the given arguments is ', total_travel_time_in_hrs)

    # display mean travel time
    mean_travel_time_in_mins = df['Trip Duration'].mean() / 60
    print('Mean of travel Time in minutes for the given arguments is ', mean_travel_time_in_mins)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    count_of_user_types = df['User Type'].value_counts()
    print('The Count of each user type for the given arguments is \n', count_of_user_types.to_string())
    print()
    print()


    if city in ['Chicago', 'New York City']:

        # Display counts of gender
        count_of_gender = df['Gender'].value_counts()
        print('The Count of each gender for the given arguments is \n', count_of_gender.to_string())
        print()
        print()
        # Display earliest, most recent, and most common year of birth
        earliest_year = df['Birth Year'].min()
        most_recent_year = df['Birth Year'].max()
        most_common_year = df['Birth Year'].mode()[0]

        print('The earliest Birth Year for the given arguments is ', earliest_year)
        print('The most recent Birth Year for the give arguments is ', most_recent_year)
        print('The most common Birth Year for the given arguments is ', most_common_year)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def raw_data_display(df):
    """ prompts the user to show raw data by 5 raws each time """


    i = 0
    while True:
        show_raw_data = input('Do you want to show some raw data?\n\
    Please type Yes or No to view the next five raws of data.\n').title()

        if show_raw_data == 'Yes':
            print()
            print(df.iloc[i : i+5])
            i += 5
        else:
            return




def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)
        raw_data_display(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
